AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Lambda Python starter project

Resources:
  LambdaLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes: 
        - python3.7 #Valid Values: nodejs6.10 | nodejs8.10 | java8 | python2.7 | python3.6 | python3.7 | dotnetcore1.0 | dotnetcore2.0 | dotnetcore2.1 | go1.x | ruby2.5 
      Content: 
        S3Bucket: "lambda-layer-for-torch-marukura"
        S3Key: "layer.zip"    #Layer File
      Description: "layer for torch-project"
      LayerName: "layer-for-torch"
  #歪み補正用のlambda  
  UndistortionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: 'lambda-layer-for-torch-marukura'
        S3Key: 'undistortion.zip'
      FunctionName: UndistortionLambda
      MemorySize: 512
      Timeout: 60
      Handler: calibrate.handler
      Runtime: python3.7
      PackageType: Zip
      Role: !GetAtt TriggerLambdaRole.Arn
      Layers:
        - !Ref LambdaLayer

  
  #異物除去用のlambda 
  CorrectionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: 'lambda-layer-for-torch-marukura'
        S3Key: 'correction.zip'
      FunctionName: CorrectionLambda
      MemorySize: 512
      Timeout: 60
      Handler: app.handler
      Runtime: python3.7
      PackageType: Zip
      Role: !GetAtt TriggerLambdaRole.Arn
      Layers:
        - !Ref LambdaLayer
      
  TimelapsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: 'lambda-layer-for-torch-marukura'
        S3Key: 'timelaps.zip'
      FunctionName: TimelapsLambda
      MemorySize: 512
      Timeout: 60
      Handler: mkvideo.handler
      Runtime: python3.7
      PackageType: Zip
      Role: !GetAtt TriggerLambdaRole.Arn
      Layers:
        - !Ref LambdaLayer
      
  #一つ目のlambdaのトリガー設定
  TriggerLambdaPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt UndistortionLambda.Arn
      Principal: 's3.amazonaws.com'
      SourceArn: !Join 
                  - ""
                  - - "arn:aws:s3:::"
                    - "torchcom-original-image"
  #二つ目のlambdaのトリガー設定
  TriggerLambdaPermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt CorrectionLambda.Arn
      Principal: 's3.amazonaws.com'
      SourceArn: !Join 
                  - ""
                  - - "arn:aws:s3:::"
                    - "torchcom-image-undistortion"
  #トリガーバケット一つ目
  S3Bucket1:
    Type: "AWS::S3::Bucket"
    DependsOn: 
      - TriggerLambdaPermission1
    Properties:
      BucketName: "torchcom-original-image"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt UndistortionLambda.Arn
  #トリガーバケット二つ目
  S3Bucket2:
    Type: "AWS::S3::Bucket"
    DependsOn: 
      - TriggerLambdaPermission2
    Properties:
      BucketName: "torchcom-image-undistortion"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt CorrectionLambda.Arn
  #トリガーに対するロール設定
  TriggerLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      RoleName: "torch-trigger-lambda-role"
